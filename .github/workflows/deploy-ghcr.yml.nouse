name: Deploy to Production (with GHCR)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_NAME: proxyserver

jobs:
  build-and-push:
    name: Build and Push to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to Server
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd ~/webcorsproxy
            
            # Create appsettings.Production.json with API keys from secrets
            cat > appsettings.Production.json << 'EOF'
            {
              "Logging": {
                "LogLevel": {
                  "Default": "Information",
                  "Microsoft.AspNetCore": "Warning"
                }
              },
              "AllowedHosts": "*",
              "ApiKeys": ${{ secrets.API_KEYS || '["default-key-1", "default-key-2"]' }},
              "SimpleCorsProxy": {
                "RequireAuth": ${{ secrets.SIMPLE_CORS_REQUIRE_AUTH || 'true' }}
              },
              "ProxyPipeline": {
                "RequestPipeline": {
                  "EnabledProcessors": [
                    "ValidationProcessor",
                    "AuthorizationProcessor",
                    "HeadersProcessor"
                  ],
                  "ProcessorSettings": {
                    "ValidationProcessor": {
                      "Order": 0,
                      "Enabled": true
                    },
                    "AuthorizationProcessor": {
                      "Order": 1,
                      "Enabled": true
                    },
                    "HeadersProcessor": {
                      "Order": 2,
                      "Enabled": true
                    }
                  }
                },
                "ResponsePipeline": {
                  "EnabledProcessors": [
                    "ContentDetectionProcessor",
                    "HeadersResponseProcessor",
                    "HtmlContentProcessor",
                    "CssContentProcessor",
                    "JsContentProcessor"
                  ],
                  "ProcessorSettings": {
                    "ContentDetectionProcessor": {
                      "Order": 0,
                      "Enabled": true
                    },
                    "HeadersResponseProcessor": {
                      "Order": 1,
                      "Enabled": true
                    },
                    "HtmlContentProcessor": {
                      "Order": 2,
                      "Enabled": true
                    },
                    "CssContentProcessor": {
                      "Order": 2,
                      "Enabled": true
                    },
                    "JsContentProcessor": {
                      "Order": 2,
                      "Enabled": true
                    }
                  }
                }
              }
            }
            EOF
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull the latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Stop and remove old container
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
            
            # Remove old images (keep last 2)
            docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "{{.ID}}" | tail -n +3 | xargs -r docker rmi || true
            
            # Run new container
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped \
              -p 8000:8080 \
              -v ~/webcorsproxy/appsettings.Production.json:/app/appsettings.Production.json:ro \
              -e ASPNETCORE_ENVIRONMENT=Production \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Show container status
            docker ps -a | grep ${{ env.CONTAINER_NAME }}
            
            # Show logs
            echo "=== Container logs ==="
            docker logs --tail 50 ${{ env.CONTAINER_NAME }}

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Wait for container to be healthy
            sleep 5
            
            # Check if container is running
            if [ "$(docker ps -q -f name=${{ env.CONTAINER_NAME }})" ]; then
              echo "? Container is running successfully"
              docker ps -f name=${{ env.CONTAINER_NAME }}
            else
              echo "? Container failed to start"
              docker logs ${{ env.CONTAINER_NAME }}
              exit 1
            fi
